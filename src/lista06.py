import numpy as np
from lib import linear_systems as ls
np.set_printoptions(precision=6, floatmode='maxprec_equal', suppress=True)


# Testes

A = np.float64([[ 25,  5, 1],
                [ 64,  8, 1],
                [144, 12, 1]])
B1 = np.float64([1, 0, 0])
B2 = np.float64([0, 1, 0])
B3 = np.float64([0, 0, 1])

ls.lu(A, B1, B2, B3)


M = np.float64([[10, 2,  1,  7],
                [ 1, 5,  1, -8],
                [ 2, 3, 10,  6]])
X = np.float64([0, 0, 0])

ls.gauss_jacobi(M, X, 10, 0.02)


# Lista

# Quest達o 1

A = np.float64([[-4.2,  2.4,  9.9, -2.5],
                [ 9.2,  7.5,  8.0, -9.5],
                [ 1.2,  0.5, -4.3,  5.8],
                [-5.7, -3.1, -6.6, -4.9]])
B1 = np.float64([14.1, -4.2, 18, -12.4])
B2 = np.float64([59.5, 99.2, -6, -77.1])

ls.lu(A, B1, B2)

# Quest達o 2

A = np.float64([[-6.1, -5.4, -3.7],
                [ 2.2, -3.6, -8.0],
                [ 3.6,  0.4, -5.0]])
B1 = np.float64([-28.9,   2.7, 25.7])
B2 = np.float64([-93.2, -45.3,  0.7])

ls.lu(A, B1, B2)

# Quest達o 3

# M = np.float64([[-3.9, -9.8,   8.2, -23.5,  67.3],
#                 [22.4, -9.4,  -9.1,  -2.6, -48.9],
#                 [ 8.4, 15.3,  -5.2,  -1.5, 118.6],
#                 [ 3.9, -7.6, -15.1,   1.9, -49.7]])
M = np.float64([[22.4, -9.4,  -9.1,  -2.6, -48.9],
                [ 8.4, 15.3,  -5.2,  -1.5, 118.6],
                [ 3.9, -7.6, -15.1,   1.9, -49.7],
                [-3.9, -9.8,   8.2, -23.5,  67.3]])
X = np.float64([-0.4, 7, -1.1, -6.1])

ls.gauss_jacobi(M, X, 5, 0.001)

# Quest達o 4

M = np.float64([[-5.5,   3.6, -1.3,  19.6],
                [-6.8, -14.4,  6.7, 207.5],
                [-3.6,   8.0, 12.4, -34.2]])
X = np.float64([-9.9, -9.5, 0.5])

ls.gauss_jacobi(M, X, 5, 0.001)
